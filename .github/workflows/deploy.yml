name: Deploy to VPS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          timeout: 300s
          command_timeout: 1800s
          script: |
            set -e  # Останавливать выполнение при любой ошибке
            set -o pipefail  # Останавливать выполнение при ошибке в пайпе
            
            echo "=== Starting deployment ==="
            
            # Переход в рабочую директорию
            echo "Changing to project directory..."
            cd /srv/post_generator/post_generator_deploy_conf
            
            # Логин в Infisical (временно отключаем set -e)
            echo "Logging into Infisical..."
            set +e  # Отключаем останов при ошибке для этой команды
            INFISICAL_OUTPUT=$(infisical login --method=universal-auth \
              --client-id=${{ secrets.INFISICAL_CLIENT_ID }} \
              --client-secret=${{ secrets.INFISICAL_CLIENT_SECRET }} \
              --silent --plain \
              --domain https://eu.infisical.com 2>&1)
            INFISICAL_EXIT_CODE=$?
            set -e  # Включаем обратно
            
            # Проверка успешности логина
            if [ $INFISICAL_EXIT_CODE -ne 0 ]; then
              echo "ERROR: Infisical login failed with exit code $INFISICAL_EXIT_CODE:"
              echo "$INFISICAL_OUTPUT"
              exit 1
            fi
            
            if echo "$INFISICAL_OUTPUT" | grep -iq "error\|access denied\|usage limit"; then
              echo "ERROR: Infisical login failed:"
              echo "$INFISICAL_OUTPUT"
              exit 1
            fi
            
            # Экспорт токена
            INFISICAL_TOKEN=$(echo "$INFISICAL_OUTPUT" | tr -d '\r\n')
            if [ -z "$INFISICAL_TOKEN" ]; then
              echo "ERROR: Infisical login returned empty token"
              exit 1
            fi
            
            export INFISICAL_TOKEN
            echo "✅ Infisical token exported successfully"
            
            # Проверка токена и доступа к проекту
            echo "Testing Infisical access..."
            set +e
            TEST_OUTPUT=$(infisical secrets --env=prod --projectId=${{ secrets.INFISICAL_PROJECT_ID }} 2>&1)
            TEST_EXIT_CODE=$?
            set -e
            
            if [ $TEST_EXIT_CODE -ne 0 ]; then
              echo "ERROR: Failed to access Infisical secrets:"
              echo "$TEST_OUTPUT"
              echo "Project ID: ${{ secrets.INFISICAL_PROJECT_ID }}"
              echo "Please check:"
              echo "  1. INFISICAL_PROJECT_ID is correct"
              echo "  2. Service account has access to 'prod' environment"
              echo "  3. Universal auth credentials are valid"
              exit 1
            fi
            echo "✅ Infisical access test passed"
            
            # Обновление кода
            echo "Pulling latest code..."
            git pull origin main
            
            # Проверка наличия docker-compose файла
            COMPOSE_FILE="docker-compose.yml"
            if [ ! -f "$COMPOSE_FILE" ]; then
              COMPOSE_FILE="docker-compose.yaml"
              if [ ! -f "$COMPOSE_FILE" ]; then
                echo "ERROR: docker-compose file not found"
                exit 1
              fi
            fi
            echo "Using compose file: $COMPOSE_FILE"
            
            # Обновление образов Docker
            echo "Pulling Docker images..."
            set +e  # Временно отключаем для pull
            docker compose pull
            PULL_EXIT_CODE=$?
            set -e  # Включаем обратно
            
            if [ $PULL_EXIT_CODE -ne 0 ]; then
              echo "WARNING: Docker pull failed (exit code $PULL_EXIT_CODE), but continuing..."
            fi
            
            # Запуск контейнеров
            echo "Starting containers..."
            set +e
            INFISICAL_RUN_OUTPUT=$(infisical run --env=prod --projectId=${{ secrets.INFISICAL_PROJECT_ID }} -- docker compose -f "$COMPOSE_FILE" up -d 2>&1)
            INFISICAL_RUN_EXIT_CODE=$?
            set -e
            
            if [ $INFISICAL_RUN_EXIT_CODE -ne 0 ]; then
              echo "ERROR: Failed to start containers with Infisical:"
              echo "$INFISICAL_RUN_OUTPUT"
              echo ""
              echo "Troubleshooting steps:"
              echo "  1. Check if INFISICAL_PROJECT_ID is correct: ${{ secrets.INFISICAL_PROJECT_ID }}"
              echo "  2. Verify service account has access to 'prod' environment"
              echo "  3. Check if all required secrets exist in Infisical"
              exit 1
            fi
            echo "✅ Containers started successfully"
            
            # Проверка статуса контейнеров
            echo "Checking container status..."
            docker compose ps
            
            # Проверка, что все контейнеры запущены
            FAILED_CONTAINERS=$(docker compose ps --filter "status=exited" --format "table {{.Service}}")
            if [ -n "$FAILED_CONTAINERS" ] && [ "$FAILED_CONTAINERS" != "SERVICE" ]; then
              echo "ERROR: Some containers failed to start:"
              echo "$FAILED_CONTAINERS"
              exit 1
            fi
            
            echo "✅ Deployment completed successfully!"